import os, base64

__n__ = ""


class CustomWASM:
    def __init__(self, stub_path: str) -> None:
        self.path = stub_path

    def compile_wasm(self):
        os.system('cd assets && wat2wasm custom.wat -o build.wasm')
        print('[+] Wasm compiled')

    def build_custom(self) -> None:
        with open(self.path, "rb") as f:
            return base64.b64encode(f.read()).decode("utf-8")

    def replace_wasm(self, b64: str) -> None:
        with open("./assets/stub.js", "r+") as f:
            with open("./out/hsw_bind.js", "w+") as hsw:
                hsw.write(f.read().replace("|replace_wasm|", b64))
        
        print('[+] hsw wasm replaced')

    def run(self):
        self.compile_wasm()

        b64 = self.build_custom()
        self.replace_wasm(b64)


class N:
    @staticmethod
    def parse_n(n: str) -> int:
        buff = base64.b64decode(n)

        byte_arr = [b for b in buff]
        bytes_length = len(buff)
        cipher_text = "".join([chr(b) for b in buff])

        print(
            f"""
        \r[cyper-text] {cipher_text}
        \r[n-bytes] {byte_arr[:50]}
        \r[n-len] {len(n)}
        \r[b64-bytes] {bytes_length}
        """
        )


if __name__ == "__main__":
    # N.parse_n(__n__)
    
    CustomWASM("../src/assets/build.wasm").run()