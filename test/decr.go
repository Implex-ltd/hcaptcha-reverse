package main

import (
    "crypto/aes"
    "crypto/cipher"
    "encoding/hex"
    "fmt"
)

func decryptData(keyStr, cipherTextStr string) ([]byte, error) {
    key, err := hex.DecodeString(keyStr)
    if err != nil {
        return nil, err
    }

    cipherText := []byte(cipherTextStr)

    nonceSize := aes.BlockSize
    if len(cipherText) < nonceSize {
        return nil, fmt.Errorf("cipherText too short. It should be at least %d bytes", nonceSize)
    }

    nonce := cipherText[:nonceSize]
    cipherText = cipherText[nonceSize:]

    block, err := aes.NewCipher(key)
    if err != nil {
        return nil, err
    }

    gcm, err := cipher.NewGCM(block)
    if err != nil {
        return nil, err
    }

    decrypted, err := gcm.Open(nil, nonce, cipherText, nil)
    if err != nil {
        return nil, err
    }

    return decrypted, nil
}

func main() {
    key := "b78d6e3b21244ab4934795aab7bfd69c9da9d214d52d5ab4dbdf81c97d5d0aee"
    cipherText := ""
    decrypted, err := decryptData(key, cipherText)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }

    fmt.Println("Decrypted data:", string(decrypted))
}
